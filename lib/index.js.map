{
  "version": 3,
  "sources": ["../src/index.ts", "../src/constants.ts", "../src/Node.ts", "../src/Task.ts", "../src/BehaviorTree.ts", "../src/decorators/index.ts", "../src/Decorator.ts", "../src/decorators/AlwaysFailDecorator.ts", "../src/decorators/AlwaysSucceedDecorator.ts", "../src/decorators/CooldownDecorator.ts", "../src/decorators/InvertDecorator.ts", "../src/decorators/LoopDecorator.ts", "../src/BranchNode.ts", "../src/Random.ts", "../src/Selector.ts", "../src/Sequence.ts", "../src/BehaviorTreeImporter.ts", "../src/Introspector.ts"],
  "sourcesContent": ["import BehaviorTree, { getRegistry, registryLookUp } from './BehaviorTree';\nimport * as decorators from './decorators';\n\nimport BehaviorTreeImporter from './BehaviorTreeImporter';\n\nimport BranchNode from './BranchNode';\nimport Node from './Node';\nimport Selector from './Selector';\nimport Sequence from './Sequence';\nimport Random from './Random';\nimport Decorator from './Decorator';\nimport Task from './Task';\nimport Introspector from './Introspector';\n\nimport { SUCCESS, FAILURE, RUNNING } from './constants';\n\nexport default BehaviorTree;\n\nexport {\n  BehaviorTree,\n  SUCCESS,\n  FAILURE,\n  RUNNING,\n  getRegistry,\n  registryLookUp,\n  BehaviorTreeImporter,\n  BranchNode,\n  Node,\n  Selector,\n  Sequence,\n  Random,\n  Decorator,\n  Task,\n  Introspector,\n  decorators\n};\nexport * from './types';\n", "export const RUNNING = Symbol('running');\nexport const SUCCESS = true;\nexport const FAILURE = false;\n", "import { RUNNING } from './constants';\nimport { Blackboard, Blueprint, MinimalBlueprint, RunConfig, Status } from './types';\n\nconst NOOP_RUN = () => false;\nconst NOOP_START = () => {}; // eslint-disable-line @typescript-eslint/no-empty-function\nconst NOOP_END = () => {}; // eslint-disable-line @typescript-eslint/no-empty-function\n\nexport default class Node {\n  _name?: string;\n  blueprint: Blueprint;\n  nodeType = 'Node';\n\n  constructor({ run = NOOP_RUN, start = NOOP_START, end = NOOP_END, ...props }: MinimalBlueprint) {\n    this.blueprint = { run, start, end, ...props };\n  }\n\n  run(blackboard: Blackboard, { introspector, rerun = false, registryLookUp = (x) => x as Node, ...config }: RunConfig = {}): Status {\n    if (!rerun) this.blueprint.start(blackboard);\n    const result = this.blueprint.run(blackboard, { ...config, rerun, registryLookUp });\n    if (result !== RUNNING) {\n      this.blueprint.end(blackboard);\n    }\n    if (introspector) {\n      introspector.push(this, result, blackboard);\n    }\n    return result;\n  }\n\n  get name(): string | undefined {\n    return this._name || this.blueprint.name;\n  }\n\n  set name(name: string | undefined) {\n    this._name = name;\n  }\n}\n", "import Node from './Node';\n\nexport default class Task extends Node {\n  nodeType = 'Task';\n}\n", "import { RUNNING } from './constants';\nimport Node from './Node';\nimport Task from './Task';\nimport { Blackboard, NodeOrFunction, NodeOrRegistration, Status, StepParameter } from './types';\n\nexport type NodeRegistry = Record<string, Node>;\n\nlet registry: NodeRegistry = {};\n\nexport function getRegistry() {\n  return registry;\n}\n\nexport function registryLookUp(node: string | Node) {\n  if (typeof node === 'string') {\n    const lookedUpNode = registry[node];\n    if (!lookedUpNode) {\n      throw new Error(`No node with name ${node} registered.`);\n    }\n    return lookedUpNode;\n  }\n  return node;\n}\n\nexport default class BehaviorTree {\n  tree: NodeOrRegistration;\n  blackboard: Blackboard;\n  lastResult: Status | null;\n\n  constructor({ tree, blackboard }: { tree: NodeOrRegistration; blackboard: Blackboard }) {\n    this.tree = tree;\n    this.blackboard = blackboard;\n    this.lastResult = null;\n  }\n\n  step({ introspector }: StepParameter = {}) {\n    const indexes = this.lastResult && typeof this.lastResult === 'object' ? this.lastResult : [];\n    const rerun = this.lastResult === RUNNING || indexes.length > 0;\n    if (introspector) {\n      introspector.start(this);\n    }\n    this.lastResult = registryLookUp(this.tree).run(this.blackboard, {\n      indexes,\n      introspector,\n      rerun,\n      registryLookUp\n    });\n    if (introspector) {\n      introspector.end();\n    }\n  }\n\n  static register(name: string, node: NodeOrFunction) {\n    registry[name] = typeof node === 'function' ? new Task({ name, run: node }) : node;\n  }\n\n  static cleanRegistry() {\n    registry = {};\n  }\n}\n", "import AlwaysFailDecorator from './AlwaysFailDecorator';\nimport AlwaysSucceedDecorator from './AlwaysSucceedDecorator';\nimport CooldownDecorator from './CooldownDecorator';\nimport InvertDecorator from './InvertDecorator';\nimport LoopDecorator from './LoopDecorator';\n\nexport { AlwaysFailDecorator, AlwaysSucceedDecorator, CooldownDecorator, InvertDecorator, LoopDecorator };\n", "import { RUNNING } from './constants';\nimport Node from './Node';\nimport { Blackboard, RunCallback, DecoratorConfig, RunConfig, DecoratorBlueprint } from './types';\n\nexport default class Decorator extends Node {\n  config!: DecoratorConfig;\n  nodeType = 'Decorator';\n\n  constructor({ config = {}, ...props }: DecoratorBlueprint = { config: {} }) {\n    super(props);\n    this.setConfig(config);\n  }\n\n  decorate(run: RunCallback, blackboard: Blackboard, config: DecoratorConfig) {\n    // This method should be overridden to make it useful\n    return run(run, blackboard, config);\n  }\n\n  run(blackboard: Blackboard, { introspector, rerun, registryLookUp = (x) => x as Node, ...config }: RunConfig = {}) {\n    if (!rerun) this.blueprint.start(blackboard);\n    let runCount = 0;\n    const result = this.decorate(\n      () => {\n        ++runCount;\n        return registryLookUp(this.blueprint.node as Node).run(blackboard, {\n          ...config,\n          rerun,\n          introspector,\n          registryLookUp\n        });\n      },\n      blackboard,\n      this.config\n    );\n\n    if (result !== RUNNING) {\n      this.blueprint.end(blackboard);\n    }\n    if (introspector) {\n      introspector.wrapLast(runCount, this, result, blackboard);\n    }\n    return result;\n  }\n\n  setConfig(config: DecoratorConfig) {\n    this.config = config;\n  }\n}\n", "import { RUNNING, FAILURE } from '../constants';\nimport Decorator from '../Decorator';\nimport { RunCallback } from '../types';\n\nexport default class AlwaysFailDecorator extends Decorator {\n  nodeType = 'AlwaysFailDecorator';\n\n  decorate(run: RunCallback) {\n    const result = run();\n    if (result === RUNNING) return RUNNING;\n    return FAILURE;\n  }\n}\n", "import { RUNNING, SUCCESS } from '../constants';\nimport Decorator from '../Decorator';\nimport { RunCallback } from '../types';\n\nexport default class AlwaysSucceedDecorator extends Decorator {\n  nodeType = 'AlwaysSucceedDecorator';\n\n  decorate(run: RunCallback) {\n    const result = run();\n    if (result === RUNNING) return RUNNING;\n    return SUCCESS;\n  }\n}\n", "import { FAILURE } from '../constants';\nimport Decorator from '../Decorator';\nimport { RunCallback } from '../types';\n\nexport default class CooldownDecorator extends Decorator {\n  lock = false;\n  nodeType = 'CooldownDecorator';\n\n  setConfig({ cooldown = 5 }) {\n    this.config = {\n      cooldown\n    };\n  }\n\n  decorate(run: RunCallback) {\n    if (this.lock) {\n      return FAILURE;\n    }\n    this.lock = true;\n    setTimeout(() => {\n      this.lock = false;\n    }, this.config.cooldown * 1000);\n    return run();\n  }\n}\n", "import { RUNNING, SUCCESS, FAILURE } from '../constants';\nimport Decorator from '../Decorator';\nimport { RunCallback } from '../types';\n\nexport default class InvertDecorator extends Decorator {\n  nodeType = 'InvertDecorator';\n\n  decorate(run: RunCallback) {\n    const result = run();\n    if (result === RUNNING) return RUNNING;\n    return result === SUCCESS ? FAILURE : SUCCESS;\n  }\n}\n", "import { FAILURE } from '../constants';\nimport Decorator from '../Decorator';\nimport { RunCallback, Status } from '../types';\n\nexport default class LoopDecorator extends Decorator {\n  nodeType = 'LoopDecorator';\n\n  setConfig({ loop = Infinity }) {\n    this.config = {\n      loop\n    };\n  }\n\n  decorate(run: RunCallback) {\n    let i = 0;\n    let result: Status = FAILURE;\n    while (i++ < this.config.loop) {\n      result = run();\n      if (result === FAILURE) return FAILURE;\n    }\n    return result;\n  }\n}\n", "import { SUCCESS, RUNNING } from './constants';\nimport Node from './Node';\nimport { Blackboard, MinimalBlueprint, NodeOrRegistration, RunConfig, Status } from './types';\n\nexport default class BranchNode extends Node {\n  numNodes: number;\n  wasRunning: boolean;\n  nodes: NodeOrRegistration[];\n  // Override this in subclasses\n  OPT_OUT_CASE: Status = SUCCESS;\n  START_CASE: Status = SUCCESS;\n\n  nodeType = 'BranchNode';\n\n  constructor(blueprint: MinimalBlueprint) {\n    super(blueprint);\n\n    this.nodes = blueprint.nodes || [];\n    this.numNodes = this.nodes.length;\n    this.wasRunning = false;\n  }\n\n  run(blackboard: Blackboard = {}, { indexes = [], introspector, rerun, registryLookUp = (x) => x as Node }: RunConfig = {}) {\n    if (!rerun) this.blueprint.start(blackboard);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let overallResult: Status | any = this.START_CASE;\n    let currentIndex = indexes.shift() || 0;\n    while (currentIndex < this.numNodes) {\n      const node = registryLookUp(this.nodes[currentIndex]);\n      const result = node.run(blackboard, { indexes, introspector, rerun, registryLookUp });\n      if (result === RUNNING) {\n        this.wasRunning = true;\n        overallResult = [currentIndex, ...indexes];\n        break;\n      } else if (typeof result === 'object') {\n        // array\n        overallResult = [...indexes, currentIndex, ...result];\n        break;\n      } else if (result === this.OPT_OUT_CASE) {\n        overallResult = result;\n        break;\n      } else {\n        this.wasRunning = false;\n        rerun = false;\n        ++currentIndex;\n      }\n    }\n    const isRunning = overallResult === RUNNING || typeof overallResult === 'object';\n    if (!isRunning) {\n      this.blueprint.end(blackboard);\n    }\n    if (introspector) {\n      const debugResult = isRunning ? RUNNING : overallResult;\n      introspector.wrapLast(Math.min(currentIndex + 1, this.numNodes), this, debugResult, blackboard);\n    }\n    return overallResult;\n  }\n}\n", "import { RUNNING } from './constants';\nimport BranchNode from './BranchNode';\nimport Node from './Node';\nimport { Blackboard, RunConfig, Status } from './types';\n\nexport default class Random extends BranchNode {\n  nodeType = 'Random';\n\n  run(blackboard: Blackboard = {}, { indexes = [], introspector, rerun, registryLookUp = (x) => x as Node }: RunConfig = {}) {\n    if (!rerun) this.blueprint.start(blackboard);\n    let currentIndex = indexes.shift() || 0;\n    if (!rerun) {\n      currentIndex = Math.floor(Math.random() * this.numNodes);\n    }\n    const node = registryLookUp(this.nodes[currentIndex]);\n    const result = node.run(blackboard, { indexes, introspector, rerun, registryLookUp });\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let overallResult: Status | any = result;\n    if (result === RUNNING) {\n      overallResult = [currentIndex, ...indexes];\n    } else if (typeof result === 'object') {\n      // array\n      overallResult = [...indexes, currentIndex, ...result];\n    }\n    const isRunning = overallResult === RUNNING || typeof overallResult === 'object';\n    if (!isRunning) {\n      this.blueprint.end(blackboard);\n    }\n    if (introspector) {\n      const debugResult = isRunning ? RUNNING : overallResult;\n      introspector.wrapLast(1, this, debugResult, blackboard);\n    }\n    return overallResult;\n  }\n}\n", "import { SUCCESS, FAILURE } from './constants';\nimport BranchNode from './BranchNode';\n\nexport default class Selector extends BranchNode {\n  nodeType = 'Selector';\n  START_CASE = FAILURE;\n  OPT_OUT_CASE = SUCCESS;\n}\n", "import { SUCCESS, FAILURE } from './constants';\nimport BranchNode from './BranchNode';\n\nexport default class Sequence extends BranchNode {\n  nodeType = 'Sequence';\n  START_CASE = SUCCESS;\n  OPT_OUT_CASE = FAILURE;\n}\n", "import Decorator from './Decorator';\nimport Node from './Node';\nimport Random from './Random';\nimport Selector from './Selector';\nimport Sequence from './Sequence';\nimport Task from './Task';\nimport AlwaysFailDecorator from './decorators/AlwaysFailDecorator';\nimport AlwaysSucceedDecorator from './decorators/AlwaysSucceedDecorator';\nimport CooldownDecorator from './decorators/CooldownDecorator';\nimport InvertDecorator from './decorators/InvertDecorator';\nimport LoopDecorator from './decorators/LoopDecorator';\nimport { registryLookUp } from './BehaviorTree';\nimport { ImportableJson } from './types';\n\nexport default class BehaviorTreeImporter {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  types: Record<string, any> = {\n    task: Task,\n    decorator: Decorator,\n    selector: Selector,\n    sequence: Sequence,\n    random: Random,\n    invert: InvertDecorator,\n    fail: AlwaysFailDecorator,\n    succeed: AlwaysSucceedDecorator,\n    cooldown: CooldownDecorator,\n    loop: LoopDecorator\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  defineType(type: string, Klass: any) {\n    this.types[type] = Klass;\n  }\n\n  parse(json: ImportableJson): Node {\n    const { type, name, ...config } = json;\n    const Klass = this.types[type];\n    if (!Klass) {\n      const registeredNode = registryLookUp(type);\n      if (registeredNode) {\n        registeredNode.name = name;\n        return registeredNode;\n      }\n      throw new Error(`Don't know how to handle type ${type}. Please register this first.`);\n    }\n\n    return new Klass({\n      name: name,\n      node: json.node ? this.parse(json.node) : null,\n      nodes: json.nodes ? json.nodes.map((subJson: ImportableJson) => this.parse(subJson)) : null,\n      config\n    });\n  }\n}\n", "import BehaviorTree from './BehaviorTree';\nimport Node from './Node';\nimport { Blackboard, IntrospectionResult, Status } from './types';\n\nexport default class Introspector {\n  currentResult: IntrospectionResult[];\n  results: IntrospectionResult[];\n  tree?: BehaviorTree;\n\n  constructor() {\n    this.currentResult = [];\n    this.results = [];\n  }\n\n  start(tree: BehaviorTree) {\n    this.tree = tree;\n    this.currentResult = [];\n  }\n\n  end() {\n    const result = this.currentResult.pop();\n    if (result) {\n      this.results.push(result);\n    }\n    delete this.tree;\n    this.currentResult = [];\n  }\n\n  push(node: Node, result: Status, blackboard: Blackboard) {\n    this.currentResult.push(this._toResult(node, result, blackboard));\n  }\n\n  wrapLast(numResults: number, node: Node, result: Status, blackboard: Blackboard) {\n    const children = this.currentResult.splice(this.currentResult.length - numResults, numResults);\n    this.currentResult.push({ ...this._toResult(node, result, blackboard), children });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _toResult(node: Node, result: Status, _blackboard: Blackboard): IntrospectionResult {\n    return { ...(node.name ? { name: node.name } : {}), result };\n  }\n\n  reset() {\n    this.results = [];\n  }\n\n  get lastResult(): IntrospectionResult | null {\n    if (this.results.length === 0) {\n      return null;\n    }\n    return this.results[this.results.length - 1];\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
